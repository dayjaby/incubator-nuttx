//--------------------------------------------------------------------------------
// Auto-generated by Migen (7014bdc) & LiteX (ceb8a650) on 2021-02-26 20:16:34
//--------------------------------------------------------------------------------
#include <generated/soc.h>
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
#include <system.h>
#ifndef CSR_ACCESSORS_DEFINED
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */
#ifndef CSR_BASE
#define CSR_BASE 0xf0000000L
#endif

/* ctrl */
#define CSR_CTRL_BASE (CSR_BASE + 0x0L)
#define CSR_CTRL_RESET_ADDR (CSR_BASE + 0x0L)
#define CSR_CTRL_RESET_SIZE 1
static inline uint32_t ctrl_reset_read(void) {
	return csr_read_simple(CSR_BASE + 0x0L);
}
static inline void ctrl_reset_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x0L);
}
#define CSR_CTRL_SCRATCH_ADDR (CSR_BASE + 0x4L)
#define CSR_CTRL_SCRATCH_SIZE 1
static inline uint32_t ctrl_scratch_read(void) {
	return csr_read_simple(CSR_BASE + 0x4L);
}
static inline void ctrl_scratch_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4L);
}
#define CSR_CTRL_BUS_ERRORS_ADDR (CSR_BASE + 0x8L)
#define CSR_CTRL_BUS_ERRORS_SIZE 1
static inline uint32_t ctrl_bus_errors_read(void) {
	return csr_read_simple(CSR_BASE + 0x8L);
}

/* cpu */
#define CSR_CPU_BASE (CSR_BASE + 0x800L)
#define CSR_CPU_TIMER_LATCH_ADDR (CSR_BASE + 0x800L)
#define CSR_CPU_TIMER_LATCH_SIZE 1
static inline uint32_t cpu_timer_latch_read(void) {
	return csr_read_simple(CSR_BASE + 0x800L);
}
static inline void cpu_timer_latch_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x800L);
}
#define CSR_CPU_TIMER_TIME_ADDR (CSR_BASE + 0x804L)
#define CSR_CPU_TIMER_TIME_SIZE 2
static inline uint64_t cpu_timer_time_read(void) {
	uint64_t r = csr_read_simple(CSR_BASE + 0x804L);
	r <<= 32;
	r |= csr_read_simple(CSR_BASE + 0x808L);
	return r;
}
#define CSR_CPU_TIMER_TIME_CMP_ADDR (CSR_BASE + 0x80cL)
#define CSR_CPU_TIMER_TIME_CMP_SIZE 2
static inline uint64_t cpu_timer_time_cmp_read(void) {
	uint64_t r = csr_read_simple(CSR_BASE + 0x80cL);
	r <<= 32;
	r |= csr_read_simple(CSR_BASE + 0x810L);
	return r;
}
static inline void cpu_timer_time_cmp_write(uint64_t v) {
	csr_write_simple(v >> 32, CSR_BASE + 0x80cL);
	csr_write_simple(v, CSR_BASE + 0x810L);
}

/* identifier_mem */
#define CSR_IDENTIFIER_MEM_BASE (CSR_BASE + 0x1000L)

/* uart */
#define CSR_UART_BASE (CSR_BASE + 0x2000L)
#define CSR_UART_RXTX_ADDR (CSR_BASE + 0x2000L)
#define CSR_UART_RXTX_SIZE 1
static inline uint32_t uart_rxtx_read(void) {
	return csr_read_simple(CSR_BASE + 0x2000L);
}
static inline void uart_rxtx_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x2000L);
}
#define CSR_UART_TXFULL_ADDR (CSR_BASE + 0x2004L)
#define CSR_UART_TXFULL_SIZE 1
static inline uint32_t uart_txfull_read(void) {
	return csr_read_simple(CSR_BASE + 0x2004L);
}
#define CSR_UART_RXEMPTY_ADDR (CSR_BASE + 0x2008L)
#define CSR_UART_RXEMPTY_SIZE 1
static inline uint32_t uart_rxempty_read(void) {
	return csr_read_simple(CSR_BASE + 0x2008L);
}
#define CSR_UART_EV_STATUS_ADDR (CSR_BASE + 0x200cL)
#define CSR_UART_EV_STATUS_SIZE 1
static inline uint32_t uart_ev_status_read(void) {
	return csr_read_simple(CSR_BASE + 0x200cL);
}
#define CSR_UART_EV_STATUS_TX_OFFSET 0
#define CSR_UART_EV_STATUS_TX_SIZE 1
static inline uint32_t uart_ev_status_tx_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t uart_ev_status_tx_read(void) {
	uint32_t word = uart_ev_status_read();
	return uart_ev_status_tx_extract(word);
}
#define CSR_UART_EV_STATUS_RX_OFFSET 1
#define CSR_UART_EV_STATUS_RX_SIZE 1
static inline uint32_t uart_ev_status_rx_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t uart_ev_status_rx_read(void) {
	uint32_t word = uart_ev_status_read();
	return uart_ev_status_rx_extract(word);
}
#define CSR_UART_EV_PENDING_ADDR (CSR_BASE + 0x2010L)
#define CSR_UART_EV_PENDING_SIZE 1
static inline uint32_t uart_ev_pending_read(void) {
	return csr_read_simple(CSR_BASE + 0x2010L);
}
static inline void uart_ev_pending_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x2010L);
}
#define CSR_UART_EV_PENDING_TX_OFFSET 0
#define CSR_UART_EV_PENDING_TX_SIZE 1
static inline uint32_t uart_ev_pending_tx_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t uart_ev_pending_tx_read(void) {
	uint32_t word = uart_ev_pending_read();
	return uart_ev_pending_tx_extract(word);
}
static inline uint32_t uart_ev_pending_tx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void uart_ev_pending_tx_write(uint32_t plain_value) {
	uint32_t oldword = uart_ev_pending_read();
	uint32_t newword = uart_ev_pending_tx_replace(oldword, plain_value);
	uart_ev_pending_write(newword);
}
#define CSR_UART_EV_PENDING_RX_OFFSET 1
#define CSR_UART_EV_PENDING_RX_SIZE 1
static inline uint32_t uart_ev_pending_rx_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t uart_ev_pending_rx_read(void) {
	uint32_t word = uart_ev_pending_read();
	return uart_ev_pending_rx_extract(word);
}
static inline uint32_t uart_ev_pending_rx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void uart_ev_pending_rx_write(uint32_t plain_value) {
	uint32_t oldword = uart_ev_pending_read();
	uint32_t newword = uart_ev_pending_rx_replace(oldword, plain_value);
	uart_ev_pending_write(newword);
}
#define CSR_UART_EV_ENABLE_ADDR (CSR_BASE + 0x2014L)
#define CSR_UART_EV_ENABLE_SIZE 1
static inline uint32_t uart_ev_enable_read(void) {
	return csr_read_simple(CSR_BASE + 0x2014L);
}
static inline void uart_ev_enable_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x2014L);
}
#define CSR_UART_EV_ENABLE_TX_OFFSET 0
#define CSR_UART_EV_ENABLE_TX_SIZE 1
static inline uint32_t uart_ev_enable_tx_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t uart_ev_enable_tx_read(void) {
	uint32_t word = uart_ev_enable_read();
	return uart_ev_enable_tx_extract(word);
}
static inline uint32_t uart_ev_enable_tx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void uart_ev_enable_tx_write(uint32_t plain_value) {
	uint32_t oldword = uart_ev_enable_read();
	uint32_t newword = uart_ev_enable_tx_replace(oldword, plain_value);
	uart_ev_enable_write(newword);
}
#define CSR_UART_EV_ENABLE_RX_OFFSET 1
#define CSR_UART_EV_ENABLE_RX_SIZE 1
static inline uint32_t uart_ev_enable_rx_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t uart_ev_enable_rx_read(void) {
	uint32_t word = uart_ev_enable_read();
	return uart_ev_enable_rx_extract(word);
}
static inline uint32_t uart_ev_enable_rx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void uart_ev_enable_rx_write(uint32_t plain_value) {
	uint32_t oldword = uart_ev_enable_read();
	uint32_t newword = uart_ev_enable_rx_replace(oldword, plain_value);
	uart_ev_enable_write(newword);
}
#define CSR_UART_TXEMPTY_ADDR (CSR_BASE + 0x2018L)
#define CSR_UART_TXEMPTY_SIZE 1
static inline uint32_t uart_txempty_read(void) {
	return csr_read_simple(CSR_BASE + 0x2018L);
}
#define CSR_UART_RXFULL_ADDR (CSR_BASE + 0x201cL)
#define CSR_UART_RXFULL_SIZE 1
static inline uint32_t uart_rxfull_read(void) {
	return csr_read_simple(CSR_BASE + 0x201cL);
}

/* timer0 */
#define CSR_TIMER0_BASE (CSR_BASE + 0x2800L)
#define CSR_TIMER0_LOAD_ADDR (CSR_BASE + 0x2800L)
#define CSR_TIMER0_LOAD_SIZE 1
static inline uint32_t timer0_load_read(void) {
	return csr_read_simple(CSR_BASE + 0x2800L);
}
static inline void timer0_load_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x2800L);
}
#define CSR_TIMER0_RELOAD_ADDR (CSR_BASE + 0x2804L)
#define CSR_TIMER0_RELOAD_SIZE 1
static inline uint32_t timer0_reload_read(void) {
	return csr_read_simple(CSR_BASE + 0x2804L);
}
static inline void timer0_reload_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x2804L);
}
#define CSR_TIMER0_EN_ADDR (CSR_BASE + 0x2808L)
#define CSR_TIMER0_EN_SIZE 1
static inline uint32_t timer0_en_read(void) {
	return csr_read_simple(CSR_BASE + 0x2808L);
}
static inline void timer0_en_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x2808L);
}
#define CSR_TIMER0_UPDATE_VALUE_ADDR (CSR_BASE + 0x280cL)
#define CSR_TIMER0_UPDATE_VALUE_SIZE 1
static inline uint32_t timer0_update_value_read(void) {
	return csr_read_simple(CSR_BASE + 0x280cL);
}
static inline void timer0_update_value_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x280cL);
}
#define CSR_TIMER0_VALUE_ADDR (CSR_BASE + 0x2810L)
#define CSR_TIMER0_VALUE_SIZE 1
static inline uint32_t timer0_value_read(void) {
	return csr_read_simple(CSR_BASE + 0x2810L);
}
#define CSR_TIMER0_EV_STATUS_ADDR (CSR_BASE + 0x2814L)
#define CSR_TIMER0_EV_STATUS_SIZE 1
static inline uint32_t timer0_ev_status_read(void) {
	return csr_read_simple(CSR_BASE + 0x2814L);
}
#define CSR_TIMER0_EV_STATUS_ZERO_OFFSET 0
#define CSR_TIMER0_EV_STATUS_ZERO_SIZE 1
static inline uint32_t timer0_ev_status_zero_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t timer0_ev_status_zero_read(void) {
	uint32_t word = timer0_ev_status_read();
	return timer0_ev_status_zero_extract(word);
}
#define CSR_TIMER0_EV_PENDING_ADDR (CSR_BASE + 0x2818L)
#define CSR_TIMER0_EV_PENDING_SIZE 1
static inline uint32_t timer0_ev_pending_read(void) {
	return csr_read_simple(CSR_BASE + 0x2818L);
}
static inline void timer0_ev_pending_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x2818L);
}
#define CSR_TIMER0_EV_PENDING_ZERO_OFFSET 0
#define CSR_TIMER0_EV_PENDING_ZERO_SIZE 1
static inline uint32_t timer0_ev_pending_zero_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t timer0_ev_pending_zero_read(void) {
	uint32_t word = timer0_ev_pending_read();
	return timer0_ev_pending_zero_extract(word);
}
static inline uint32_t timer0_ev_pending_zero_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void timer0_ev_pending_zero_write(uint32_t plain_value) {
	uint32_t oldword = timer0_ev_pending_read();
	uint32_t newword = timer0_ev_pending_zero_replace(oldword, plain_value);
	timer0_ev_pending_write(newword);
}
#define CSR_TIMER0_EV_ENABLE_ADDR (CSR_BASE + 0x281cL)
#define CSR_TIMER0_EV_ENABLE_SIZE 1
static inline uint32_t timer0_ev_enable_read(void) {
	return csr_read_simple(CSR_BASE + 0x281cL);
}
static inline void timer0_ev_enable_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x281cL);
}
#define CSR_TIMER0_EV_ENABLE_ZERO_OFFSET 0
#define CSR_TIMER0_EV_ENABLE_ZERO_SIZE 1
static inline uint32_t timer0_ev_enable_zero_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t timer0_ev_enable_zero_read(void) {
	uint32_t word = timer0_ev_enable_read();
	return timer0_ev_enable_zero_extract(word);
}
static inline uint32_t timer0_ev_enable_zero_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void timer0_ev_enable_zero_write(uint32_t plain_value) {
	uint32_t oldword = timer0_ev_enable_read();
	uint32_t newword = timer0_ev_enable_zero_replace(oldword, plain_value);
	timer0_ev_enable_write(newword);
}
#define CSR_TIMER0_UPTIME_LATCH_ADDR (CSR_BASE + 0x2820L)
#define CSR_TIMER0_UPTIME_LATCH_SIZE 1
static inline uint32_t timer0_uptime_latch_read(void) {
	return csr_read_simple(CSR_BASE + 0x2820L);
}
static inline void timer0_uptime_latch_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x2820L);
}
#define CSR_TIMER0_UPTIME_CYCLES_ADDR (CSR_BASE + 0x2824L)
#define CSR_TIMER0_UPTIME_CYCLES_SIZE 2
static inline uint64_t timer0_uptime_cycles_read(void) {
	uint64_t r = csr_read_simple(CSR_BASE + 0x2824L);
	r <<= 32;
	r |= csr_read_simple(CSR_BASE + 0x2828L);
	return r;
}

/* ddrphy */
#define CSR_DDRPHY_BASE (CSR_BASE + 0x3000L)
#define CSR_DDRPHY_RST_ADDR (CSR_BASE + 0x3000L)
#define CSR_DDRPHY_RST_SIZE 1
static inline uint32_t ddrphy_rst_read(void) {
	return csr_read_simple(CSR_BASE + 0x3000L);
}
static inline void ddrphy_rst_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3000L);
}
#define CSR_DDRPHY_HALF_SYS8X_TAPS_ADDR (CSR_BASE + 0x3004L)
#define CSR_DDRPHY_HALF_SYS8X_TAPS_SIZE 1
static inline uint32_t ddrphy_half_sys8x_taps_read(void) {
	return csr_read_simple(CSR_BASE + 0x3004L);
}
static inline void ddrphy_half_sys8x_taps_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3004L);
}
#define CSR_DDRPHY_WLEVEL_EN_ADDR (CSR_BASE + 0x3008L)
#define CSR_DDRPHY_WLEVEL_EN_SIZE 1
static inline uint32_t ddrphy_wlevel_en_read(void) {
	return csr_read_simple(CSR_BASE + 0x3008L);
}
static inline void ddrphy_wlevel_en_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3008L);
}
#define CSR_DDRPHY_WLEVEL_STROBE_ADDR (CSR_BASE + 0x300cL)
#define CSR_DDRPHY_WLEVEL_STROBE_SIZE 1
static inline uint32_t ddrphy_wlevel_strobe_read(void) {
	return csr_read_simple(CSR_BASE + 0x300cL);
}
static inline void ddrphy_wlevel_strobe_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x300cL);
}
#define CSR_DDRPHY_DLY_SEL_ADDR (CSR_BASE + 0x3010L)
#define CSR_DDRPHY_DLY_SEL_SIZE 1
static inline uint32_t ddrphy_dly_sel_read(void) {
	return csr_read_simple(CSR_BASE + 0x3010L);
}
static inline void ddrphy_dly_sel_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3010L);
}
#define CSR_DDRPHY_RDLY_DQ_RST_ADDR (CSR_BASE + 0x3014L)
#define CSR_DDRPHY_RDLY_DQ_RST_SIZE 1
static inline uint32_t ddrphy_rdly_dq_rst_read(void) {
	return csr_read_simple(CSR_BASE + 0x3014L);
}
static inline void ddrphy_rdly_dq_rst_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3014L);
}
#define CSR_DDRPHY_RDLY_DQ_INC_ADDR (CSR_BASE + 0x3018L)
#define CSR_DDRPHY_RDLY_DQ_INC_SIZE 1
static inline uint32_t ddrphy_rdly_dq_inc_read(void) {
	return csr_read_simple(CSR_BASE + 0x3018L);
}
static inline void ddrphy_rdly_dq_inc_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3018L);
}
#define CSR_DDRPHY_RDLY_DQ_BITSLIP_RST_ADDR (CSR_BASE + 0x301cL)
#define CSR_DDRPHY_RDLY_DQ_BITSLIP_RST_SIZE 1
static inline uint32_t ddrphy_rdly_dq_bitslip_rst_read(void) {
	return csr_read_simple(CSR_BASE + 0x301cL);
}
static inline void ddrphy_rdly_dq_bitslip_rst_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x301cL);
}
#define CSR_DDRPHY_RDLY_DQ_BITSLIP_ADDR (CSR_BASE + 0x3020L)
#define CSR_DDRPHY_RDLY_DQ_BITSLIP_SIZE 1
static inline uint32_t ddrphy_rdly_dq_bitslip_read(void) {
	return csr_read_simple(CSR_BASE + 0x3020L);
}
static inline void ddrphy_rdly_dq_bitslip_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3020L);
}
#define CSR_DDRPHY_WDLY_DQ_BITSLIP_RST_ADDR (CSR_BASE + 0x3024L)
#define CSR_DDRPHY_WDLY_DQ_BITSLIP_RST_SIZE 1
static inline uint32_t ddrphy_wdly_dq_bitslip_rst_read(void) {
	return csr_read_simple(CSR_BASE + 0x3024L);
}
static inline void ddrphy_wdly_dq_bitslip_rst_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3024L);
}
#define CSR_DDRPHY_WDLY_DQ_BITSLIP_ADDR (CSR_BASE + 0x3028L)
#define CSR_DDRPHY_WDLY_DQ_BITSLIP_SIZE 1
static inline uint32_t ddrphy_wdly_dq_bitslip_read(void) {
	return csr_read_simple(CSR_BASE + 0x3028L);
}
static inline void ddrphy_wdly_dq_bitslip_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3028L);
}
#define CSR_DDRPHY_RDPHASE_ADDR (CSR_BASE + 0x302cL)
#define CSR_DDRPHY_RDPHASE_SIZE 1
static inline uint32_t ddrphy_rdphase_read(void) {
	return csr_read_simple(CSR_BASE + 0x302cL);
}
static inline void ddrphy_rdphase_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x302cL);
}
#define CSR_DDRPHY_WRPHASE_ADDR (CSR_BASE + 0x3030L)
#define CSR_DDRPHY_WRPHASE_SIZE 1
static inline uint32_t ddrphy_wrphase_read(void) {
	return csr_read_simple(CSR_BASE + 0x3030L);
}
static inline void ddrphy_wrphase_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3030L);
}

/* sdram */
#define CSR_SDRAM_BASE (CSR_BASE + 0x3800L)
#define CSR_SDRAM_DFII_CONTROL_ADDR (CSR_BASE + 0x3800L)
#define CSR_SDRAM_DFII_CONTROL_SIZE 1
static inline uint32_t sdram_dfii_control_read(void) {
	return csr_read_simple(CSR_BASE + 0x3800L);
}
static inline void sdram_dfii_control_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3800L);
}
#define CSR_SDRAM_DFII_CONTROL_SEL_OFFSET 0
#define CSR_SDRAM_DFII_CONTROL_SEL_SIZE 1
static inline uint32_t sdram_dfii_control_sel_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdram_dfii_control_sel_read(void) {
	uint32_t word = sdram_dfii_control_read();
	return sdram_dfii_control_sel_extract(word);
}
static inline uint32_t sdram_dfii_control_sel_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sdram_dfii_control_sel_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_control_read();
	uint32_t newword = sdram_dfii_control_sel_replace(oldword, plain_value);
	sdram_dfii_control_write(newword);
}
#define CSR_SDRAM_DFII_CONTROL_CKE_OFFSET 1
#define CSR_SDRAM_DFII_CONTROL_CKE_SIZE 1
static inline uint32_t sdram_dfii_control_cke_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t sdram_dfii_control_cke_read(void) {
	uint32_t word = sdram_dfii_control_read();
	return sdram_dfii_control_cke_extract(word);
}
static inline uint32_t sdram_dfii_control_cke_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void sdram_dfii_control_cke_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_control_read();
	uint32_t newword = sdram_dfii_control_cke_replace(oldword, plain_value);
	sdram_dfii_control_write(newword);
}
#define CSR_SDRAM_DFII_CONTROL_ODT_OFFSET 2
#define CSR_SDRAM_DFII_CONTROL_ODT_SIZE 1
static inline uint32_t sdram_dfii_control_odt_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 2) & mask );
}
static inline uint32_t sdram_dfii_control_odt_read(void) {
	uint32_t word = sdram_dfii_control_read();
	return sdram_dfii_control_odt_extract(word);
}
static inline uint32_t sdram_dfii_control_odt_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void sdram_dfii_control_odt_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_control_read();
	uint32_t newword = sdram_dfii_control_odt_replace(oldword, plain_value);
	sdram_dfii_control_write(newword);
}
#define CSR_SDRAM_DFII_CONTROL_RESET_N_OFFSET 3
#define CSR_SDRAM_DFII_CONTROL_RESET_N_SIZE 1
static inline uint32_t sdram_dfii_control_reset_n_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 3) & mask );
}
static inline uint32_t sdram_dfii_control_reset_n_read(void) {
	uint32_t word = sdram_dfii_control_read();
	return sdram_dfii_control_reset_n_extract(word);
}
static inline uint32_t sdram_dfii_control_reset_n_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 3))) | (mask & plain_value)<< 3 ;
}
static inline void sdram_dfii_control_reset_n_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_control_read();
	uint32_t newword = sdram_dfii_control_reset_n_replace(oldword, plain_value);
	sdram_dfii_control_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_ADDR (CSR_BASE + 0x3804L)
#define CSR_SDRAM_DFII_PI0_COMMAND_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_read(void) {
	return csr_read_simple(CSR_BASE + 0x3804L);
}
static inline void sdram_dfii_pi0_command_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3804L);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_ISSUE_ADDR (CSR_BASE + 0x3808L)
#define CSR_SDRAM_DFII_PI0_COMMAND_ISSUE_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_issue_read(void) {
	return csr_read_simple(CSR_BASE + 0x3808L);
}
static inline void sdram_dfii_pi0_command_issue_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3808L);
}
#define CSR_SDRAM_DFII_PI0_ADDRESS_ADDR (CSR_BASE + 0x380cL)
#define CSR_SDRAM_DFII_PI0_ADDRESS_SIZE 1
static inline uint32_t sdram_dfii_pi0_address_read(void) {
	return csr_read_simple(CSR_BASE + 0x380cL);
}
static inline void sdram_dfii_pi0_address_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x380cL);
}
#define CSR_SDRAM_DFII_PI0_BADDRESS_ADDR (CSR_BASE + 0x3810L)
#define CSR_SDRAM_DFII_PI0_BADDRESS_SIZE 1
static inline uint32_t sdram_dfii_pi0_baddress_read(void) {
	return csr_read_simple(CSR_BASE + 0x3810L);
}
static inline void sdram_dfii_pi0_baddress_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3810L);
}
#define CSR_SDRAM_DFII_PI0_WRDATA_ADDR (CSR_BASE + 0x3814L)
#define CSR_SDRAM_DFII_PI0_WRDATA_SIZE 1
static inline uint32_t sdram_dfii_pi0_wrdata_read(void) {
	return csr_read_simple(CSR_BASE + 0x3814L);
}
static inline void sdram_dfii_pi0_wrdata_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3814L);
}
#define CSR_SDRAM_DFII_PI0_RDDATA_ADDR (CSR_BASE + 0x3818L)
#define CSR_SDRAM_DFII_PI0_RDDATA_SIZE 1
static inline uint32_t sdram_dfii_pi0_rddata_read(void) {
	return csr_read_simple(CSR_BASE + 0x3818L);
}
#define CSR_SDRAM_DFII_PI1_COMMAND_ADDR (CSR_BASE + 0x381cL)
#define CSR_SDRAM_DFII_PI1_COMMAND_SIZE 1
static inline uint32_t sdram_dfii_pi1_command_read(void) {
	return csr_read_simple(CSR_BASE + 0x381cL);
}
static inline void sdram_dfii_pi1_command_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x381cL);
}
#define CSR_SDRAM_DFII_PI1_COMMAND_ISSUE_ADDR (CSR_BASE + 0x3820L)
#define CSR_SDRAM_DFII_PI1_COMMAND_ISSUE_SIZE 1
static inline uint32_t sdram_dfii_pi1_command_issue_read(void) {
	return csr_read_simple(CSR_BASE + 0x3820L);
}
static inline void sdram_dfii_pi1_command_issue_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3820L);
}
#define CSR_SDRAM_DFII_PI1_ADDRESS_ADDR (CSR_BASE + 0x3824L)
#define CSR_SDRAM_DFII_PI1_ADDRESS_SIZE 1
static inline uint32_t sdram_dfii_pi1_address_read(void) {
	return csr_read_simple(CSR_BASE + 0x3824L);
}
static inline void sdram_dfii_pi1_address_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3824L);
}
#define CSR_SDRAM_DFII_PI1_BADDRESS_ADDR (CSR_BASE + 0x3828L)
#define CSR_SDRAM_DFII_PI1_BADDRESS_SIZE 1
static inline uint32_t sdram_dfii_pi1_baddress_read(void) {
	return csr_read_simple(CSR_BASE + 0x3828L);
}
static inline void sdram_dfii_pi1_baddress_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3828L);
}
#define CSR_SDRAM_DFII_PI1_WRDATA_ADDR (CSR_BASE + 0x382cL)
#define CSR_SDRAM_DFII_PI1_WRDATA_SIZE 1
static inline uint32_t sdram_dfii_pi1_wrdata_read(void) {
	return csr_read_simple(CSR_BASE + 0x382cL);
}
static inline void sdram_dfii_pi1_wrdata_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x382cL);
}
#define CSR_SDRAM_DFII_PI1_RDDATA_ADDR (CSR_BASE + 0x3830L)
#define CSR_SDRAM_DFII_PI1_RDDATA_SIZE 1
static inline uint32_t sdram_dfii_pi1_rddata_read(void) {
	return csr_read_simple(CSR_BASE + 0x3830L);
}
#define CSR_SDRAM_DFII_PI2_COMMAND_ADDR (CSR_BASE + 0x3834L)
#define CSR_SDRAM_DFII_PI2_COMMAND_SIZE 1
static inline uint32_t sdram_dfii_pi2_command_read(void) {
	return csr_read_simple(CSR_BASE + 0x3834L);
}
static inline void sdram_dfii_pi2_command_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3834L);
}
#define CSR_SDRAM_DFII_PI2_COMMAND_ISSUE_ADDR (CSR_BASE + 0x3838L)
#define CSR_SDRAM_DFII_PI2_COMMAND_ISSUE_SIZE 1
static inline uint32_t sdram_dfii_pi2_command_issue_read(void) {
	return csr_read_simple(CSR_BASE + 0x3838L);
}
static inline void sdram_dfii_pi2_command_issue_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3838L);
}
#define CSR_SDRAM_DFII_PI2_ADDRESS_ADDR (CSR_BASE + 0x383cL)
#define CSR_SDRAM_DFII_PI2_ADDRESS_SIZE 1
static inline uint32_t sdram_dfii_pi2_address_read(void) {
	return csr_read_simple(CSR_BASE + 0x383cL);
}
static inline void sdram_dfii_pi2_address_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x383cL);
}
#define CSR_SDRAM_DFII_PI2_BADDRESS_ADDR (CSR_BASE + 0x3840L)
#define CSR_SDRAM_DFII_PI2_BADDRESS_SIZE 1
static inline uint32_t sdram_dfii_pi2_baddress_read(void) {
	return csr_read_simple(CSR_BASE + 0x3840L);
}
static inline void sdram_dfii_pi2_baddress_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3840L);
}
#define CSR_SDRAM_DFII_PI2_WRDATA_ADDR (CSR_BASE + 0x3844L)
#define CSR_SDRAM_DFII_PI2_WRDATA_SIZE 1
static inline uint32_t sdram_dfii_pi2_wrdata_read(void) {
	return csr_read_simple(CSR_BASE + 0x3844L);
}
static inline void sdram_dfii_pi2_wrdata_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3844L);
}
#define CSR_SDRAM_DFII_PI2_RDDATA_ADDR (CSR_BASE + 0x3848L)
#define CSR_SDRAM_DFII_PI2_RDDATA_SIZE 1
static inline uint32_t sdram_dfii_pi2_rddata_read(void) {
	return csr_read_simple(CSR_BASE + 0x3848L);
}
#define CSR_SDRAM_DFII_PI3_COMMAND_ADDR (CSR_BASE + 0x384cL)
#define CSR_SDRAM_DFII_PI3_COMMAND_SIZE 1
static inline uint32_t sdram_dfii_pi3_command_read(void) {
	return csr_read_simple(CSR_BASE + 0x384cL);
}
static inline void sdram_dfii_pi3_command_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x384cL);
}
#define CSR_SDRAM_DFII_PI3_COMMAND_ISSUE_ADDR (CSR_BASE + 0x3850L)
#define CSR_SDRAM_DFII_PI3_COMMAND_ISSUE_SIZE 1
static inline uint32_t sdram_dfii_pi3_command_issue_read(void) {
	return csr_read_simple(CSR_BASE + 0x3850L);
}
static inline void sdram_dfii_pi3_command_issue_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3850L);
}
#define CSR_SDRAM_DFII_PI3_ADDRESS_ADDR (CSR_BASE + 0x3854L)
#define CSR_SDRAM_DFII_PI3_ADDRESS_SIZE 1
static inline uint32_t sdram_dfii_pi3_address_read(void) {
	return csr_read_simple(CSR_BASE + 0x3854L);
}
static inline void sdram_dfii_pi3_address_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3854L);
}
#define CSR_SDRAM_DFII_PI3_BADDRESS_ADDR (CSR_BASE + 0x3858L)
#define CSR_SDRAM_DFII_PI3_BADDRESS_SIZE 1
static inline uint32_t sdram_dfii_pi3_baddress_read(void) {
	return csr_read_simple(CSR_BASE + 0x3858L);
}
static inline void sdram_dfii_pi3_baddress_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3858L);
}
#define CSR_SDRAM_DFII_PI3_WRDATA_ADDR (CSR_BASE + 0x385cL)
#define CSR_SDRAM_DFII_PI3_WRDATA_SIZE 1
static inline uint32_t sdram_dfii_pi3_wrdata_read(void) {
	return csr_read_simple(CSR_BASE + 0x385cL);
}
static inline void sdram_dfii_pi3_wrdata_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x385cL);
}
#define CSR_SDRAM_DFII_PI3_RDDATA_ADDR (CSR_BASE + 0x3860L)
#define CSR_SDRAM_DFII_PI3_RDDATA_SIZE 1
static inline uint32_t sdram_dfii_pi3_rddata_read(void) {
	return csr_read_simple(CSR_BASE + 0x3860L);
}

/* ethphy */
#define CSR_ETHPHY_BASE (CSR_BASE + 0x4000L)
#define CSR_ETHPHY_CRG_RESET_ADDR (CSR_BASE + 0x4000L)
#define CSR_ETHPHY_CRG_RESET_SIZE 1
static inline uint32_t ethphy_crg_reset_read(void) {
	return csr_read_simple(CSR_BASE + 0x4000L);
}
static inline void ethphy_crg_reset_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4000L);
}
#define CSR_ETHPHY_MDIO_W_ADDR (CSR_BASE + 0x4004L)
#define CSR_ETHPHY_MDIO_W_SIZE 1
static inline uint32_t ethphy_mdio_w_read(void) {
	return csr_read_simple(CSR_BASE + 0x4004L);
}
static inline void ethphy_mdio_w_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4004L);
}
#define CSR_ETHPHY_MDIO_W_MDC_OFFSET 0
#define CSR_ETHPHY_MDIO_W_MDC_SIZE 1
static inline uint32_t ethphy_mdio_w_mdc_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ethphy_mdio_w_mdc_read(void) {
	uint32_t word = ethphy_mdio_w_read();
	return ethphy_mdio_w_mdc_extract(word);
}
static inline uint32_t ethphy_mdio_w_mdc_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void ethphy_mdio_w_mdc_write(uint32_t plain_value) {
	uint32_t oldword = ethphy_mdio_w_read();
	uint32_t newword = ethphy_mdio_w_mdc_replace(oldword, plain_value);
	ethphy_mdio_w_write(newword);
}
#define CSR_ETHPHY_MDIO_W_OE_OFFSET 1
#define CSR_ETHPHY_MDIO_W_OE_SIZE 1
static inline uint32_t ethphy_mdio_w_oe_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t ethphy_mdio_w_oe_read(void) {
	uint32_t word = ethphy_mdio_w_read();
	return ethphy_mdio_w_oe_extract(word);
}
static inline uint32_t ethphy_mdio_w_oe_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void ethphy_mdio_w_oe_write(uint32_t plain_value) {
	uint32_t oldword = ethphy_mdio_w_read();
	uint32_t newword = ethphy_mdio_w_oe_replace(oldword, plain_value);
	ethphy_mdio_w_write(newword);
}
#define CSR_ETHPHY_MDIO_W_W_OFFSET 2
#define CSR_ETHPHY_MDIO_W_W_SIZE 1
static inline uint32_t ethphy_mdio_w_w_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 2) & mask );
}
static inline uint32_t ethphy_mdio_w_w_read(void) {
	uint32_t word = ethphy_mdio_w_read();
	return ethphy_mdio_w_w_extract(word);
}
static inline uint32_t ethphy_mdio_w_w_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void ethphy_mdio_w_w_write(uint32_t plain_value) {
	uint32_t oldword = ethphy_mdio_w_read();
	uint32_t newword = ethphy_mdio_w_w_replace(oldword, plain_value);
	ethphy_mdio_w_write(newword);
}
#define CSR_ETHPHY_MDIO_R_ADDR (CSR_BASE + 0x4008L)
#define CSR_ETHPHY_MDIO_R_SIZE 1
static inline uint32_t ethphy_mdio_r_read(void) {
	return csr_read_simple(CSR_BASE + 0x4008L);
}
#define CSR_ETHPHY_MDIO_R_R_OFFSET 0
#define CSR_ETHPHY_MDIO_R_R_SIZE 1
static inline uint32_t ethphy_mdio_r_r_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ethphy_mdio_r_r_read(void) {
	uint32_t word = ethphy_mdio_r_read();
	return ethphy_mdio_r_r_extract(word);
}

/* leds */
#define CSR_LEDS_BASE (CSR_BASE + 0x4800L)
#define CSR_LEDS_OUT_ADDR (CSR_BASE + 0x4800L)
#define CSR_LEDS_OUT_SIZE 1
static inline uint32_t leds_out_read(void) {
	return csr_read_simple(CSR_BASE + 0x4800L);
}
static inline void leds_out_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4800L);
}

/* sdphy */
#define CSR_SDPHY_BASE (CSR_BASE + 0x5000L)
#define CSR_SDPHY_CARD_DETECT_ADDR (CSR_BASE + 0x5000L)
#define CSR_SDPHY_CARD_DETECT_SIZE 1
static inline uint32_t sdphy_card_detect_read(void) {
	return csr_read_simple(CSR_BASE + 0x5000L);
}
#define CSR_SDPHY_CLOCKER_DIVIDER_ADDR (CSR_BASE + 0x5004L)
#define CSR_SDPHY_CLOCKER_DIVIDER_SIZE 1
static inline uint32_t sdphy_clocker_divider_read(void) {
	return csr_read_simple(CSR_BASE + 0x5004L);
}
static inline void sdphy_clocker_divider_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x5004L);
}
#define CSR_SDPHY_INIT_INITIALIZE_ADDR (CSR_BASE + 0x5008L)
#define CSR_SDPHY_INIT_INITIALIZE_SIZE 1
static inline uint32_t sdphy_init_initialize_read(void) {
	return csr_read_simple(CSR_BASE + 0x5008L);
}
static inline void sdphy_init_initialize_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x5008L);
}
#define CSR_SDPHY_DATAW_STATUS_ADDR (CSR_BASE + 0x500cL)
#define CSR_SDPHY_DATAW_STATUS_SIZE 1
static inline uint32_t sdphy_dataw_status_read(void) {
	return csr_read_simple(CSR_BASE + 0x500cL);
}
#define CSR_SDPHY_DATAW_STATUS_ACCEPTED_OFFSET 0
#define CSR_SDPHY_DATAW_STATUS_ACCEPTED_SIZE 1
static inline uint32_t sdphy_dataw_status_accepted_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdphy_dataw_status_accepted_read(void) {
	uint32_t word = sdphy_dataw_status_read();
	return sdphy_dataw_status_accepted_extract(word);
}
#define CSR_SDPHY_DATAW_STATUS_CRC_ERROR_OFFSET 1
#define CSR_SDPHY_DATAW_STATUS_CRC_ERROR_SIZE 1
static inline uint32_t sdphy_dataw_status_crc_error_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t sdphy_dataw_status_crc_error_read(void) {
	uint32_t word = sdphy_dataw_status_read();
	return sdphy_dataw_status_crc_error_extract(word);
}
#define CSR_SDPHY_DATAW_STATUS_WRITE_ERROR_OFFSET 2
#define CSR_SDPHY_DATAW_STATUS_WRITE_ERROR_SIZE 1
static inline uint32_t sdphy_dataw_status_write_error_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 2) & mask );
}
static inline uint32_t sdphy_dataw_status_write_error_read(void) {
	uint32_t word = sdphy_dataw_status_read();
	return sdphy_dataw_status_write_error_extract(word);
}

/* sdcore */
#define CSR_SDCORE_BASE (CSR_BASE + 0x5800L)
#define CSR_SDCORE_CMD_ARGUMENT_ADDR (CSR_BASE + 0x5800L)
#define CSR_SDCORE_CMD_ARGUMENT_SIZE 1
static inline uint32_t sdcore_cmd_argument_read(void) {
	return csr_read_simple(CSR_BASE + 0x5800L);
}
static inline void sdcore_cmd_argument_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x5800L);
}
#define CSR_SDCORE_CMD_COMMAND_ADDR (CSR_BASE + 0x5804L)
#define CSR_SDCORE_CMD_COMMAND_SIZE 1
static inline uint32_t sdcore_cmd_command_read(void) {
	return csr_read_simple(CSR_BASE + 0x5804L);
}
static inline void sdcore_cmd_command_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x5804L);
}
#define CSR_SDCORE_CMD_SEND_ADDR (CSR_BASE + 0x5808L)
#define CSR_SDCORE_CMD_SEND_SIZE 1
static inline uint32_t sdcore_cmd_send_read(void) {
	return csr_read_simple(CSR_BASE + 0x5808L);
}
static inline void sdcore_cmd_send_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x5808L);
}
#define CSR_SDCORE_CMD_RESPONSE_ADDR (CSR_BASE + 0x580cL)
#define CSR_SDCORE_CMD_RESPONSE_SIZE 4
#define CSR_SDCORE_CMD_EVENT_ADDR (CSR_BASE + 0x581cL)
#define CSR_SDCORE_CMD_EVENT_SIZE 1
static inline uint32_t sdcore_cmd_event_read(void) {
	return csr_read_simple(CSR_BASE + 0x581cL);
}
#define CSR_SDCORE_DATA_EVENT_ADDR (CSR_BASE + 0x5820L)
#define CSR_SDCORE_DATA_EVENT_SIZE 1
static inline uint32_t sdcore_data_event_read(void) {
	return csr_read_simple(CSR_BASE + 0x5820L);
}
#define CSR_SDCORE_BLOCK_LENGTH_ADDR (CSR_BASE + 0x5824L)
#define CSR_SDCORE_BLOCK_LENGTH_SIZE 1
static inline uint32_t sdcore_block_length_read(void) {
	return csr_read_simple(CSR_BASE + 0x5824L);
}
static inline void sdcore_block_length_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x5824L);
}
#define CSR_SDCORE_BLOCK_COUNT_ADDR (CSR_BASE + 0x5828L)
#define CSR_SDCORE_BLOCK_COUNT_SIZE 1
static inline uint32_t sdcore_block_count_read(void) {
	return csr_read_simple(CSR_BASE + 0x5828L);
}
static inline void sdcore_block_count_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x5828L);
}

/* sdblock2mem */
#define CSR_SDBLOCK2MEM_BASE (CSR_BASE + 0x6000L)
#define CSR_SDBLOCK2MEM_DMA_BASE_ADDR (CSR_BASE + 0x6000L)
#define CSR_SDBLOCK2MEM_DMA_BASE_SIZE 2
static inline uint64_t sdblock2mem_dma_base_read(void) {
	uint64_t r = csr_read_simple(CSR_BASE + 0x6000L);
	r <<= 32;
	r |= csr_read_simple(CSR_BASE + 0x6004L);
	return r;
}
static inline void sdblock2mem_dma_base_write(uint64_t v) {
	csr_write_simple(v >> 32, CSR_BASE + 0x6000L);
	csr_write_simple(v, CSR_BASE + 0x6004L);
}
#define CSR_SDBLOCK2MEM_DMA_LENGTH_ADDR (CSR_BASE + 0x6008L)
#define CSR_SDBLOCK2MEM_DMA_LENGTH_SIZE 1
static inline uint32_t sdblock2mem_dma_length_read(void) {
	return csr_read_simple(CSR_BASE + 0x6008L);
}
static inline void sdblock2mem_dma_length_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x6008L);
}
#define CSR_SDBLOCK2MEM_DMA_ENABLE_ADDR (CSR_BASE + 0x600cL)
#define CSR_SDBLOCK2MEM_DMA_ENABLE_SIZE 1
static inline uint32_t sdblock2mem_dma_enable_read(void) {
	return csr_read_simple(CSR_BASE + 0x600cL);
}
static inline void sdblock2mem_dma_enable_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x600cL);
}
#define CSR_SDBLOCK2MEM_DMA_DONE_ADDR (CSR_BASE + 0x6010L)
#define CSR_SDBLOCK2MEM_DMA_DONE_SIZE 1
static inline uint32_t sdblock2mem_dma_done_read(void) {
	return csr_read_simple(CSR_BASE + 0x6010L);
}
#define CSR_SDBLOCK2MEM_DMA_LOOP_ADDR (CSR_BASE + 0x6014L)
#define CSR_SDBLOCK2MEM_DMA_LOOP_SIZE 1
static inline uint32_t sdblock2mem_dma_loop_read(void) {
	return csr_read_simple(CSR_BASE + 0x6014L);
}
static inline void sdblock2mem_dma_loop_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x6014L);
}

/* sdmem2block */
#define CSR_SDMEM2BLOCK_BASE (CSR_BASE + 0x6800L)
#define CSR_SDMEM2BLOCK_DMA_BASE_ADDR (CSR_BASE + 0x6800L)
#define CSR_SDMEM2BLOCK_DMA_BASE_SIZE 2
static inline uint64_t sdmem2block_dma_base_read(void) {
	uint64_t r = csr_read_simple(CSR_BASE + 0x6800L);
	r <<= 32;
	r |= csr_read_simple(CSR_BASE + 0x6804L);
	return r;
}
static inline void sdmem2block_dma_base_write(uint64_t v) {
	csr_write_simple(v >> 32, CSR_BASE + 0x6800L);
	csr_write_simple(v, CSR_BASE + 0x6804L);
}
#define CSR_SDMEM2BLOCK_DMA_LENGTH_ADDR (CSR_BASE + 0x6808L)
#define CSR_SDMEM2BLOCK_DMA_LENGTH_SIZE 1
static inline uint32_t sdmem2block_dma_length_read(void) {
	return csr_read_simple(CSR_BASE + 0x6808L);
}
static inline void sdmem2block_dma_length_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x6808L);
}
#define CSR_SDMEM2BLOCK_DMA_ENABLE_ADDR (CSR_BASE + 0x680cL)
#define CSR_SDMEM2BLOCK_DMA_ENABLE_SIZE 1
static inline uint32_t sdmem2block_dma_enable_read(void) {
	return csr_read_simple(CSR_BASE + 0x680cL);
}
static inline void sdmem2block_dma_enable_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x680cL);
}
#define CSR_SDMEM2BLOCK_DMA_DONE_ADDR (CSR_BASE + 0x6810L)
#define CSR_SDMEM2BLOCK_DMA_DONE_SIZE 1
static inline uint32_t sdmem2block_dma_done_read(void) {
	return csr_read_simple(CSR_BASE + 0x6810L);
}
#define CSR_SDMEM2BLOCK_DMA_LOOP_ADDR (CSR_BASE + 0x6814L)
#define CSR_SDMEM2BLOCK_DMA_LOOP_SIZE 1
static inline uint32_t sdmem2block_dma_loop_read(void) {
	return csr_read_simple(CSR_BASE + 0x6814L);
}
static inline void sdmem2block_dma_loop_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x6814L);
}
#define CSR_SDMEM2BLOCK_DMA_OFFSET_ADDR (CSR_BASE + 0x6818L)
#define CSR_SDMEM2BLOCK_DMA_OFFSET_SIZE 1
static inline uint32_t sdmem2block_dma_offset_read(void) {
	return csr_read_simple(CSR_BASE + 0x6818L);
}

/* sdirq */
#define CSR_SDIRQ_BASE (CSR_BASE + 0x7000L)
#define CSR_SDIRQ_STATUS_ADDR (CSR_BASE + 0x7000L)
#define CSR_SDIRQ_STATUS_SIZE 1
static inline uint32_t sdirq_status_read(void) {
	return csr_read_simple(CSR_BASE + 0x7000L);
}
#define CSR_SDIRQ_STATUS_CARD_DETECT_OFFSET 0
#define CSR_SDIRQ_STATUS_CARD_DETECT_SIZE 1
static inline uint32_t sdirq_status_card_detect_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdirq_status_card_detect_read(void) {
	uint32_t word = sdirq_status_read();
	return sdirq_status_card_detect_extract(word);
}
#define CSR_SDIRQ_STATUS_BLOCK2MEM_DMA_OFFSET 1
#define CSR_SDIRQ_STATUS_BLOCK2MEM_DMA_SIZE 1
static inline uint32_t sdirq_status_block2mem_dma_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t sdirq_status_block2mem_dma_read(void) {
	uint32_t word = sdirq_status_read();
	return sdirq_status_block2mem_dma_extract(word);
}
#define CSR_SDIRQ_STATUS_MEM2BLOCK_DMA_OFFSET 2
#define CSR_SDIRQ_STATUS_MEM2BLOCK_DMA_SIZE 1
static inline uint32_t sdirq_status_mem2block_dma_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 2) & mask );
}
static inline uint32_t sdirq_status_mem2block_dma_read(void) {
	uint32_t word = sdirq_status_read();
	return sdirq_status_mem2block_dma_extract(word);
}
#define CSR_SDIRQ_PENDING_ADDR (CSR_BASE + 0x7004L)
#define CSR_SDIRQ_PENDING_SIZE 1
static inline uint32_t sdirq_pending_read(void) {
	return csr_read_simple(CSR_BASE + 0x7004L);
}
static inline void sdirq_pending_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x7004L);
}
#define CSR_SDIRQ_PENDING_CARD_DETECT_OFFSET 0
#define CSR_SDIRQ_PENDING_CARD_DETECT_SIZE 1
static inline uint32_t sdirq_pending_card_detect_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdirq_pending_card_detect_read(void) {
	uint32_t word = sdirq_pending_read();
	return sdirq_pending_card_detect_extract(word);
}
static inline uint32_t sdirq_pending_card_detect_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sdirq_pending_card_detect_write(uint32_t plain_value) {
	uint32_t oldword = sdirq_pending_read();
	uint32_t newword = sdirq_pending_card_detect_replace(oldword, plain_value);
	sdirq_pending_write(newword);
}
#define CSR_SDIRQ_PENDING_BLOCK2MEM_DMA_OFFSET 1
#define CSR_SDIRQ_PENDING_BLOCK2MEM_DMA_SIZE 1
static inline uint32_t sdirq_pending_block2mem_dma_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t sdirq_pending_block2mem_dma_read(void) {
	uint32_t word = sdirq_pending_read();
	return sdirq_pending_block2mem_dma_extract(word);
}
static inline uint32_t sdirq_pending_block2mem_dma_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void sdirq_pending_block2mem_dma_write(uint32_t plain_value) {
	uint32_t oldword = sdirq_pending_read();
	uint32_t newword = sdirq_pending_block2mem_dma_replace(oldword, plain_value);
	sdirq_pending_write(newword);
}
#define CSR_SDIRQ_PENDING_MEM2BLOCK_DMA_OFFSET 2
#define CSR_SDIRQ_PENDING_MEM2BLOCK_DMA_SIZE 1
static inline uint32_t sdirq_pending_mem2block_dma_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 2) & mask );
}
static inline uint32_t sdirq_pending_mem2block_dma_read(void) {
	uint32_t word = sdirq_pending_read();
	return sdirq_pending_mem2block_dma_extract(word);
}
static inline uint32_t sdirq_pending_mem2block_dma_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void sdirq_pending_mem2block_dma_write(uint32_t plain_value) {
	uint32_t oldword = sdirq_pending_read();
	uint32_t newword = sdirq_pending_mem2block_dma_replace(oldword, plain_value);
	sdirq_pending_write(newword);
}
#define CSR_SDIRQ_ENABLE_ADDR (CSR_BASE + 0x7008L)
#define CSR_SDIRQ_ENABLE_SIZE 1
static inline uint32_t sdirq_enable_read(void) {
	return csr_read_simple(CSR_BASE + 0x7008L);
}
static inline void sdirq_enable_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x7008L);
}
#define CSR_SDIRQ_ENABLE_CARD_DETECT_OFFSET 0
#define CSR_SDIRQ_ENABLE_CARD_DETECT_SIZE 1
static inline uint32_t sdirq_enable_card_detect_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdirq_enable_card_detect_read(void) {
	uint32_t word = sdirq_enable_read();
	return sdirq_enable_card_detect_extract(word);
}
static inline uint32_t sdirq_enable_card_detect_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sdirq_enable_card_detect_write(uint32_t plain_value) {
	uint32_t oldword = sdirq_enable_read();
	uint32_t newword = sdirq_enable_card_detect_replace(oldword, plain_value);
	sdirq_enable_write(newword);
}
#define CSR_SDIRQ_ENABLE_BLOCK2MEM_DMA_OFFSET 1
#define CSR_SDIRQ_ENABLE_BLOCK2MEM_DMA_SIZE 1
static inline uint32_t sdirq_enable_block2mem_dma_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t sdirq_enable_block2mem_dma_read(void) {
	uint32_t word = sdirq_enable_read();
	return sdirq_enable_block2mem_dma_extract(word);
}
static inline uint32_t sdirq_enable_block2mem_dma_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void sdirq_enable_block2mem_dma_write(uint32_t plain_value) {
	uint32_t oldword = sdirq_enable_read();
	uint32_t newword = sdirq_enable_block2mem_dma_replace(oldword, plain_value);
	sdirq_enable_write(newword);
}
#define CSR_SDIRQ_ENABLE_MEM2BLOCK_DMA_OFFSET 2
#define CSR_SDIRQ_ENABLE_MEM2BLOCK_DMA_SIZE 1
static inline uint32_t sdirq_enable_mem2block_dma_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 2) & mask );
}
static inline uint32_t sdirq_enable_mem2block_dma_read(void) {
	uint32_t word = sdirq_enable_read();
	return sdirq_enable_mem2block_dma_extract(word);
}
static inline uint32_t sdirq_enable_mem2block_dma_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void sdirq_enable_mem2block_dma_write(uint32_t plain_value) {
	uint32_t oldword = sdirq_enable_read();
	uint32_t newword = sdirq_enable_mem2block_dma_replace(oldword, plain_value);
	sdirq_enable_write(newword);
}

#endif
